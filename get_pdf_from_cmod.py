#!/usr/bin/python
#==============================================================================
#
# Description : This script to call DMS API to retrieve PDF based on DocId
#
# Input       : jobname
#               jobid
#               ccid
#               phasename
#               jobdef
#               lob
#               bor
#               jobdir       : /td/download/jobstore/jobid
#               docidfile    : generated by Docid parser process
#               pdfurl       : DMS API to retrieve pdf from CMOD
#               pdfpath      : path to save pdf
# 
# Output      : pdfpath/docid.pdf
#

#
#==============================================================================


import argparse
import ConfigParser
import cx_Oracle
import datetime
import glob
import os
import shutil
import sys
import time
import csv
import tarfile
import utils
import operator
import json
import requests
import base64


#==============================================================================
# Constants.
#==============================================================================

# Exit codes.  See the status_info database table.
EXIT = {}
EXIT["Job Successful"] = 0
EXIT["Job Failed"] = 99
EXIT["System Error"] = 20
EXIT["Database Error"] = 33
EXIT["Docid File Not Found"] = 35
EXIT["PDF Request Error"] = 36

	
#==============================================================================
# Check arguments.
#==============================================================================
def checkArgs():

    # The arguments to be passed to this script.
    parser = utils.ArgumentParser()
    parser.add_argument("--jobname", help="Job name", required=True)
    parser.add_argument("--jobid", help="Job id", required=True, type=int)
    parser.add_argument("--ccid", help="Command Center id", required=True, type=int)
    parser.add_argument("--phasename", help="Phase name", required=True)
    parser.add_argument("--jobdef", help="Job definition name", required=True)
    parser.add_argument("--lob", help="Line of business", required=True)
    parser.add_argument("--bor", help="Book of record", required=True)
    parser.add_argument("--jobdir", help="Job directory", required=True)
    parser.add_argument("--docidfile", help="Docid file name", required=True)
    parser.add_argument("--pdfurl", help="Pdf retrieve base url", required=True)
    parser.add_argument("--pdfpath", help="Pdf output path", required=True)
	
    try:
        args = vars(parser.parse_args())

    # Invalid argument.
    except argparse.ArgumentError, exc:
        sys.stderr.write("Invalid argument: " \
            + exc.argument.option_strings[0] + " " + exc.message + "\n")
        sys.exit(EXIT["System Error"])

    # Missing argument.
    except SystemExit:
        sys.stderr.write("Invalid arguments\n")
        sys.exit(EXIT["System Error"])

    return args


#==============================================================================
# Show the arguments.
#==============================================================================
def showArgs():

    logger.info("Start : " + sys.argv[0])
    logger.info("Log : " + log)
    logger.info("Current directory : " + os.getcwd())
    logger.info("Job name : " + args["jobname"])
    logger.info("Job id : " + str(args["jobid"]))
    logger.info("CC id : " + str(args["ccid"]))
    logger.info("Phase name : " + args["phasename"])
    logger.info("Job definition name : " + args["jobdef"])
    logger.info("LOB : " + args["lob"])
    logger.info("BOR : " + args["bor"])
    logger.info("Job directory : " + args["jobdir"])
    logger.info("Docid file : " + args["docidfile"])
    logger.info("Pdf retrieve base url : " + args["pdfurl"])
    logger.info("Pdf output path : " + args["pdfpath"])
    logger.info("")


#==============================================================================
# Handle errors (if any) and exit.
#==============================================================================
def exit(exitCode):

    # Connect to Oracle.
    logger.info("Connect to Oracle")

    try:
        con, cur = utils.getOracle()

        if exitCode != EXIT["Job Successful"]:
            # Create failed file.
            utils.createFailedFile(logger, args["jobid"], exitCode)

            # Insert to Oracle exception_info table.
            insert = utils.insertExceptionInfo(logger, args["jobid"], \
                args["ccid"], args["phasename"], getExitReason(exitCode), \
                exitCode, con, cur)

            if insert == False:
                exitCode = EXIT["Database Error"]

        cur.close()
        con.close()

    except cx_Oracle.DatabaseError, e:
        error, = e
        logger.error(error.message)
        exitCode = EXIT["Database Error"]

    logger.info("Exit code: " + str(exitCode) + ": " + getExitReason(exitCode))
    sys.exit(exitCode)


#==============================================================================
# Get the exit reason.
#==============================================================================
def getExitReason(exitCode):

    for reason, number in EXIT.items():
        if number == exitCode:
            return reason

			
#==============================================================================
# Define global variables.
#==============================================================================
def defineVariables():

	global docidFile
	global pdfUrl
	global pdfPath

	docidFile = args["docidfile"]
	pdfUrl = args["pdfurl"]
	pdfPath = args["pdfpath"]


#==============================================================================
# Get token.
#==============================================================================
def getToken():
	
	token = "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjEifQ.eyJjYyI6IjMyNDQiLCJyZW1vdGVhZGRyIjoiTi9BIiwiYWNmMmlkIjoieHVsNSIsInN1YiI6InVybjpjb206dGQ6YXBpOmNsaWVudGlkOjdiOWFiZGFkLTRlMGItNGFkNy1iMTU4LTQ2NTA0YjU0OGZjYyIsInZlciI6IjEuMSIsInJlYWRvbmx5IjoiZmFsc2UiLCJ1c2VyYWdlbnQiOiJOL0EiLCJ0b2tlblR5cGUiOiJhY2Nlc3NUb2tlbiIsImRpcmVjdG9yeSI6IlREQkZHIiwidXNlcmlkIjoieHVsNSIsImV4cCI6MTQ4NDg3MzgwMCwic2NvcGUiOlsiZG9jbS5jbW9kLmZsZHIuciJdLCJjbGllbnRfaWQiOiI3YjlhYmRhZC00ZTBiLTRhZDctYjE1OC00NjUwNGI1NDhmY2MiLCJpc3MiOiJ1cm46Y29tOnRkOmFwaTpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tOnRkOmFwaTpnYXRld2F5OnNlY3VyaXR5OnYxIiwianRpIjoibXR2VWFYS3BGVng5UGZmSnVGWkMxZnB3cGNsQndTZ3FBclRoIn0.O1vq_XF7gMV4wrLPnn1RhhXcwJ5Bij_NvKhyERrYhRldhhh1689E0hJrWVnp0EROBM13SOgcsM-cZkHxyvyybCM6a7jPl-rcy2ZV87M6av70vue4KVBKqyCgO02eoVX0Sg6PbPjK42qeSggooV19_vXaoh7vYNaf1mHtgmZLBD99HCk2huyXValaDppUdtRO4WrDf0M9gsCnxNe9sX8FQdibAHFZH6KYAJlf5sNhhvay42DhdSdV5x0AfS8ZgEdLglbWqqk1lgMK6jsJAPOeW7nlqcE_5yePqHqS8kJWUFRHzq6eh65Ku3rcmg3andvUF6rquXKUxo47oWkGeINvbA"
	
###	token = "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjEifQ.eyJjYyI6IjMyNDQiLCJyZW1vdGVhZGRyIjoiTi9BIiwiYWNmMmlkIjoieHVsNSIsInN1YiI6InVybjpjb206dGQ6YXBpOmNsaWVudGlkOjdiOWFiZGFkLTRlMGItNGFkNy1iMTU4LTQ2NTA0YjU0OGZjYyIsInZlciI6IjEuMSIsInJlYWRvbmx5IjoiZmFsc2UiLCJ1c2VyYWdlbnQiOiJOL0EiLCJ0b2tlblR5cGUiOiJhY2Nlc3NUb2tlbiIsImRpcmVjdG9yeSI6IlREQkZHIiwidXNlcmlkIjoieHVsNSIsImV4cCI6MTQ4NDM2MTIzOCwic2NvcGUiOlsiZG9jbS5jbW9kLmZsZHIuciJdLCJjbGllbnRfaWQiOiI3YjlhYmRhZC00ZTBiLTRhZDctYjE1OC00NjUwNGI1NDhmY2MiLCJpc3MiOiJ1cm46Y29tOnRkOmFwaTpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tOnRkOmFwaTpnYXRld2F5OnNlY3VyaXR5OnYxIiwianRpIjoiYk9MRUN1Tnpsd2QwWjVrUjdCY1ZaMEtQRWFpZ3g2TVhHckx1In0.NzTw9KWh0y7EctWHG6C2128yY6vQxjdTgMXWCS9IPy0ozZMWpgbQL-Hjl7pitoio3w6RaorhYPDE5S6pXxJq5Nb-ygad1A7nXq6_qb0k_kZxlPc0rJJ0sWdJOrMVXgq7FtZmrd0vkGT8epgUrERP8yoS76BhXTI95tVsrHM_BzH97eq6pV1aarHruvEQvd6BJeqTsuUWrSFleNUQZtzU5N2EyYW1aAbhrWMsG7NUv7FMj96u5OKYEoOE1pUUIhR8oQOwQ3AlduQbdFD1h2RJxg810M84orihsvGRTVxumbPO-w-95mxahgr-8PUliD9zof3H12cLcz_Var1cji6ClQ"
	
	logger.info("Token : " + token)
	
	return token
	
	
#==============================================================================
# Retrieve Pdf from CMOD.
#==============================================================================
def getPdf():
	
	try:
		with open(docidFile, 'rb') as inf:
			docid = inf.read().replace('\n', '')
			pdfFile = pdfPath + docid + ".pdf"
			logger.info("Docid : " + docid)
			logger.info("")
			
			url = pdfUrl + docid + '?portal=esdp'
			logger.info("URL retrieve pdf : " + url)
			logger.info("")
			
			headers = {'Authorization' : getToken(), 'traceabilityid' : 123456789}
			
			try:
				response = requests.get(url, verify=False, headers=headers)
				resp = response.json()
				status = resp['status']['serverStatusCode']
				logger.info("Response status : " + status)	
				logger.info("")

				if status == '200':
					content = resp['document']['content']
					with open(pdfFile, 'wb') as outf:
						outf.write(base64.decodestring(content))
						logger.info("PDF is retrieved successfully : " + pdfFile)
						logger.info("")
				else:
					print resp
					logger.info("PDF response has errors")
					exit(EXIT["PDF Request Error"])
				
			except requests.exceptions.RequestException, e:
				error, = e
				logger.error(error.message)
				exit(EXIT["PDF Request Error"])
				
	except IOError, e:
		error, = e
		logger.error(error.message)
		exit(EXIT["Docid File Not Found"])

		
#==============================================================================
# Main starts here.
#==============================================================================
# Start time.  Used to calculate elapsed time later.
startTime = datetime.datetime.now()

# Check arguments.
args = checkArgs()

# Get the logger.
log, logger = utils.getLogger(args["jobid"])

# Show the arguments.
showArgs()

# Default exit code.  Will change later if errors occur.
exitCode = EXIT["Job Successful"]

# define variables
defineVariables()

# retrieve pdf from CMOD
getPdf()

exit(exitCode)
